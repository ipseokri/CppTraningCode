1. 클래스 생성자 및 기본 구성

우선, 클래스를 만드는데, private 로 실수부 변수 realN 허수부 변수 imagN 을 선언하여 복소수를 관리한다.
그리고 기본생성자에서 맴버변수초기화를 사용해 맴버변수를 0으로 set 하여 기본 객체를 생성할수 있도록 만든다.
또한 두개의 parameter로 입력을 받는 생성자를 만들어 맴버변수를 초기화 할수 있도록한다.

2. 클래스 연산자 지원

다음 세 연산에 대해서 클래스가 지원해야 한다.
- 복소수 op 복소수
- 복소수 op 실수
- 실수 op 복소수
우선 두 연산 복소수 op 복소수 연산과 복소수 op 실수 연산은 연산자 오버로딩을 통해 클래스안에 구현할 것이다.
그러나 3번째 실수 op 복소수는 앞에 오는 것이 실수이기 때문에 friend 함수로 return 형을 클래스 형으로 return 해준다.
따라서 클래스 내부에 1,2 번째 연산을 위한 오버로딩 함수 8개, 그리고 클래스 외부에 실수 op 복소수를 위한 연산자 오버로딩이 필요하다.

그리고 복소수 op 실수에서 0으로 나누었을때 divided by 0 에러를 발생시키지 않기 위해서 input 이 0 일때 exit(0); 을 해주는 트리거를 만든다.
또한 마찬가지로 복소수 op 복소수 또는 실수 op 복소수일 경우에도 복소수의 Init 자체가 0으로 이루어 질 수 있기 때문에
복소수 객체의 변수 realN 과 imagN 이 모두 0일때 0으로 나누는 연산이기 때문에 조건문을 넣어 에러로 처리할수 있도록 핸들링 해준다.

그리고 각각의 연산에 대해서는 다음과 같이 처리한다.

만약 두 복소수 a+bi , c+di 가 있다는 가정하에 
더하기 연산자는 (a+c)+(b+d)i 로 처리해주고,
빼기 연산자는 (a-c)+(b-d)i 로 처리해준다.
곱하기 연산자는 a*c + (a*d)i + (b*c)i + (b*d) i^2 인데 여기서 i^2 은  -1 과 같기 때문에 , 계산을 해줄때 i^2 대신 -1을 대입하여 계산해준다.
나누기 연산자는 복소수를 이용해야 한다. 분모의 복소수를 분모와 분자에 각각 곱해주어야 하는데, 연산을 한번에 처리하기 무리가 있기 때문에
먼저 분모라는 devider 라는 변수를 만들어 분모와 분모의 복소수를 곱해주면 다음과 같다. (c+di)(c-di) = a^2 - b^2 이된다.
그리고 나서 분자에 (a+bi)와 (c-di)를 곲한 값을 실수과 허수 변수에 각각 계산해주고 이후에 devider로 나누어 realN과 imagN 에 저장하여 나눗셈을 처리한다.

모든 연산은 본래의 값 즉 처음 초기화한 값이 변경되면 안되기 때문에 return 자료형을 클래스의 레퍼런스가 아닌 클래스로 temp 클래스를 만들어 return해준다.

3. 클래스의 cout 지원

ostream 의 객체를 받아와 클래스의 reference 를 받아 ostream을 return 하여 cout 과 유기적으로 이어질 수 있도록 만들어 준다.
마찬가지로 ostream 의 객체를 사용해야 하기 때문에, 클래스 내부가 아닌 friend 선언으로 함수의 외부에 선언해주어야 한다.

