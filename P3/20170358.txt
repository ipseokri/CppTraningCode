1. PetClass 설계

정의 : 펫 클래스는 펫에 대한 정보를 가지고 있어야 한다. 그리고 펫의 정보를 출력할 수 있어야 한다.

각각 펫의 이름, 주인의 이름, 하루당 숙박비 그리고 원하는 숙박일수에 대한 변수를 private로 선언해준다.
그리고 생성자를 두개 만들어서 하나는 기본생성자로 default 상태로 초기화시켜주고, 나머지 하나는 입력을 받는 생성자로 클래스 변수를 원하는 내용을 초기화 할 수 있도록 도와준다.
또한 체크인을 한번만 해야하기 때문에 체크인에 대한 정보를 저장하기 위해서 private 로 클래스 bool 변수를 이용하여 해당 펫이 체크인을 했는지 안했는지에 대해 저장해준다.
또한 해당 펫이 처음 체크인 할 때 몇일 숙박할건지와 rate 가 나오기 때문에 따로 요금을 계산해 놓는 double형 변수 fee를 가지고 있는다.
그리고 모든 클래스 변수에 대해서 설정자 함수를 만들어주는데, setFee() 함수는 Rate나 잠자는 일수 nights 가 재정의 될 때마다 초기화해준다.
그리고 모든 클래스 변수에 대해서 접근자 함수를 만들어 클래스 변수의 값을 얻어 올 수 있도록 설계하였다.
get, set 함수 이외에 펫의 정보를 출력하는 PrintPetInfo, 그리고 날이 지날때마다 업데이트를 지속적으로 해주는 dayLeft 함수 그리고 해당 펫이 체크아웃을 할때
클래스 변수 checkin 을 false로 바꿔주는 함수를 추가적으로 만들어주었다.

2. OwnerClass 설계

정의 : 주인에 대한 정보를 가지고 있어야한다. 그리고 돈을 지불했을때 잔돈을 계속해서 업데이트 해야 한다.

private 변수에 주인의 이름, 그리고 잔금, 그리고 펫을 몇마리 데리고 있는지 업데이트 해줄 name, balance, hasPet이라는 변수를 생성해준다.
생성자를 두개 만들어서, 하나는 입력을 받지 않는 기본생성자, 그리고 다른하나는 주인의 이름, 잔금을 입력으로 받는 생성자를 만든다. 그리고 나머지 변수들은
전부 0으로 초기화해준다. 각각의 변수에 대해서 설정자와 접근자를 만들어 값을 변경하거나 얻을 수 있도록 해준다.
펫이 호텔에서 checkin checkout 할때 주인이 몇마리의 pet을 소유하고 있는지 계속해서 업데이트 해줘야 하므로, hasPet의 값을 수정하는
addPetNum과 subPetNum을 만들어 주인 한명에 대한 소유하고있는 pet의 개수를 조절 할 수 있도록 해주었다.
그리고 주인이 현재 호텔에 머물고 있는 Pet이 없다면 showowners 기능에서 출력되지 않는다, 하지만 맨 처음 주인이 등록되고 나서 출력을 실행할때는
출력을 시켜주어야 하기 때문에, init이라는 bool 변수를 만들어줘, 초기 상태에는 출력을 할수있도록 설정해주고, 출력 후에는 init을 다시 False로 만들어 주인의 출력 여부를
Pet의 수에만 결정될 수 있도록 한다. PayingFee라는 함수를 만들어 fee를 입력받아 owner클래스의 balance 에서 fee만큼을 빼주는 함수를 만들어준다.
그리고 마지막으로 printOwnerInfo 를 만들어 pet을 데리고 있거나 init이 True일 경우에만 owner에 대한 정보를 출력 할 수 있도록 한다.


3. Main 동작 구현

정의 : 100명의 주인, 100명의 펫을 저장할 각각 사이즈 [100]의 배열, text file을 읽고, 읽었을때 명령어에 따라 동작 구현

main을 들어오자마자 우선 pet클래스를 자료형으로 하는 크기 [100]의 배열을 만들어주고 마찬가지로 owner 클래스에 대해서도 생성해준다.
호텔이 운영된 날짜, 잔액을 저장하기 위해서 workdays 와 balance 변수를 저장해주고, 각각 배열에 owner와 pet이 들어갈때 몇명, 몇마리가 들어갔는지 파악하기위해서
pet_num과 owner_num이라는 지역변수를 선언해준다.
그다음 파일을 읽기위해 ifstream의 변수 readFile을 선언하여 open 함수를 통해 file을 연다.
if문으로 file이 열려있는지, 확인을 한 뒤, while 문으로 파일의 끝까지 읽도록 조건문을 삽입한다.
while 문에 들어온 후, 파일의 내용을 읽기위해 getline 함수를 이용하여 string 클래스의 변수를 만들어준다.
그리고 그 변수를 이용해 라인을 한줄 읽어오는데, 한개의 라인에 명령어 그리고 인자들이 있기 때문에 이를 분리하기 위해서 istringstream type의 변수를 getline으로 읽어온
변수로 초기화 해준다. 이후 while문으로 getline 함수를 이용해 구분자로 공백을 이용하여 값을 분리해주고, 그걸 벡터에 담아주어 밑에서 사용한다.
구분자를 통해 벡터에 각 명령어 set과 입력 정보들이 전달되면 이프문에 따라서 벡터의 [0]번째 요소가 어떤 명령어인지 구분하는 .find함수와 if문을 통해 명령어를 구분해준다.
명령어를 구분한 뒤에는, 각 명령어에 따라서 각 기능을 클래스에 구현된 생성자와 함수들을 이용해 기능을 구현 하면 된다.

세세한 구현으로는 register 명령이 들어왓을때에는 owner_num 변수의 숫자를 증가시켜주는데 그 전에 , owner_num을 인덱스로 하는 ownerlist에 owner클래스의 생성자를 통해 초기화해준다.

checkin명령어가 들어왔을 때에는 pet_num 변수의 숫자를 증가시켜주는데 그 전에 pet_num을 인덱스로 하는 petlist에 pet클래스의 생성자를 통해 초기화 해준다. 그리고 체크인을 할때에는
petlist를 초기화 하고나서, 생성자의 주인의 이름과 매칭되는 주인을찾아 주인이 소유하고 있는 펫의 숫자를 1 증가시켜 준다.

그리고 showpet과 showowner에서는 각각 pet_num과 owner_num인 main에서 관리되는 변수로 for문을 돌려 출력해준다.

pass 에서는 우선 명려엉를 받자마자, 운영일 수ㅎ에 숫자를 더해주고, for문으로 petlist를 순회하며, 펫의 숙박일자를 줄여주는데, 숙발 일수가 0보다 같거나 작아질 경우 checkout절차를 밟는다.
먼저, 내부에 for문을 하나 더 선언해 ownerlist를 순회해 주인을 찾아주고, 주인의 소유하고 있는 잔액이, 펫의 총 숙박 비용보다 많다면 체크아웃을 진행시키는데, 돈이 적다면 더이상 체크아웃을 진행하지 않고
펫은 영원히 호첼에 남게된다. 

마지막으로 getbalance는 pass에서 업데이트된 잔액과 workingdays를 출력해주면 끝이난다.